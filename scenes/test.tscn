[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends TileMap

var transitions = []
var rooms = []
func _ready():
	randomize()
	var dir = Directory.new()
	dir.open(\"res://scenes/maps\")
	dir.list_dir_begin(true)
	var filename = \"res://scenes/maps/\" + dir.get_next()
	while(filename != \"\" && filename != \"res://scenes/maps/\"):
		var tilemap = load(filename).instance()
		if tilemap.type == 0:
			transitions.push_back(tilemap)
		else:
			rooms.push_back(tilemap)
		filename = \"res://scenes/maps/\" + dir.get_next()
	generate(1)
	
func generate(var nb_steps, var offset = Vector2(0,0), var out = [], var type = 1):
#	if out.size() == 0:
	var element
	var index = randi() % rooms.size()
	element = rooms[index]
#			rooms.remove(index)

	# build the map
	for i in range(element.get_children().size()):
		var layer = element.get_children()[i]
		var tilemap
		if get_children().size() <= i:
			tilemap = TileMap.new()
			tilemap.tile_set = load(\"res://assets/TileSets/kitchen.res\")
			add_child(tilemap)
		else:
			tilemap = get_children()[i]
		for tile in layer.get_used_cells():
			tilemap.set_cellv(tile + offset, layer.get_cellv(tile), layer.is_cell_x_flipped(tile.x, tile.y), layer.is_cell_y_flipped(tile.x, tile.y), layer.is_cell_transposed(tile.x, tile.y))

	if out.size() > 0:
		# build the transitions
		var path = get_shortest_path(out, offset, element.out)
		for tile in path:
			get_children()[0].set_cellv(tile, 3)

	# Choose out
	if nb_steps > 0:
		nb_steps -= 1
		type = (type + 1) % 2
		generate(nb_steps, Vector2(offset.x, - element.size.y - 6), element.out, type)
		generate(nb_steps, Vector2(element.size.x + 6, offset.y), element.out, type)
		generate(nb_steps, Vector2(-element.size.x - 6, offset.y), element.out, type)
		generate(nb_steps, Vector2(offset.x, element.size.y + 6), element.out, type)
	# close map
	else:
		#lement.close
		pass
			
func get_shortest_path(var out1, var offset, var out2):
	var path_weight = -1
	var nodes = null
	for solution1 in out1:
		for solution2 in out2:
			var dist = (solution1[0]).distance_to(solution2[0] + offset)
			if path_weight == -1 || dist < path_weight:
				nodes = [solution1[0], solution2[0]]
				path_weight = dist
	return shortest_path(nodes[0], nodes[1] + offset)
	
func shortest_path(var start, var target):
	print(\"start : \" , start, \" target : \", target)
	var path = []
	var diff = target - start
	var diff_half = (diff /2)
	diff_half = Vector2(round(diff_half.x), round(diff_half.y))
	var inc
	if abs(diff.x) > abs(diff.y):
		if diff.x != 0:
			inc = diff.x / abs(diff.x)
			for i in range(0, diff_half.x, inc):
				path.push_back(Vector2(start.x + i, start.y))
		if diff.y != 0:
			inc = diff.y / abs(diff.y)
			for i in range(0, diff.y, inc):
				path.push_back(Vector2(start.x + diff_half.x, start.y + i))
		if diff.x != 0:
			inc = diff.x / abs(diff.x)
			for i in range(0, diff_half.x, inc):
				path.push_back(Vector2(start.x + diff_half.x + i, start.y + diff.y))
	else:
		if diff.y != 0:
			inc = diff.y / abs(diff.y)
			for i in range(0, diff_half.y, inc):
				path.push_back(Vector2(start.x, start.y + i))
		if diff.x != 0:
			inc = diff.x / abs(diff.x)
			for i in range(0, diff.x, inc):
				path.push_back(Vector2(start.x + i, start.y + diff_half.y))
		if diff.y != 0:
			inc = diff.y / abs(diff.y)
			for i in range(0, diff_half.y, inc):
				path.push_back(Vector2(start.x + diff.x, start.y + diff_half.y + i))
#	print(\"path : \", path)
	if path.back() != target:
		path.push_back(target)
	return path
#	var closed_list = {}
#	var open_list = []
#	var dist = euclidian_dist(start, target)
#	var current_node = {\"position\" : start, \"cost_g\" : 0, \"cost_h\" : dist, \"cost_f\" : dist, \"parent\" : start}
#	open_list.push_back(current_node)
#	while (current_node.position.x != target.x || current_node.position.y != target.y) && !open_list.empty():
#		# take the best node
#		current_node = open_list.pop_front()
#		# add node in the closed list
#		closed_list[current_node.position] = current_node
#		# search neighbor and add to the opened list
#		for offset in list_neighbor_offsets: 
#			var neighbour_position = current_node.position + offset
#			# if the neighbour already is not visited
#			if !closed_list.has(neighbour_position):
#				# distance from start position to the current node position
#				var cost_g = closed_list[current_node.position].cost_g + euclidian_dist(neighbour_position, current_node.position)
#				# distance from the current node position to the target position
#				var cost_h = euclidian_dist(neighbour_position, target)
#				# distance from start position to the current node by the finding path 
#				# and then distance to the target by piou piou back
#				var cost_f = cost_g + cost_h
#				# set the parent to build the final path in the end ()
#				# it's a position because it's the used key for the map (don't use pointers, not safe with a map -> need to think like communist, not like arnarchist #privatejoke)
#				var parent = current_node.position
#				# search inside the array ... O(n) not crazy, but no ordered map -> log(n)
#				var find_index = -1
#				for i in range(open_list.size()):
#					if open_list[i].position == neighbour_position:
#						find_index = i
#						break
#				# if the neighbour is in the open list, need to check if the node is better.
#				# if not, replace this node by the neighbour
#				# + sort the list regards to the criterion
#				if find_index != -1:
#					var find = open_list[find_index]
#					if cost_f < find.cost_f:
#						open_list[find_index] = {\"position\" : neighbour_position, \"cost_g\" : cost_g, \"cost_h\" : cost_h, \"cost_f\" : cost_f, \"parent\" : parent}
#						open_list.sort_custom(self, \"compare_nodes\")
#				else:
#					open_list.push_back({\"position\" : neighbour_position, \"cost_g\" : cost_g, \"cost_h\" : cost_h, \"cost_f\" : cost_f, \"parent\" : parent})
#					open_list.sort_custom(self, \"compare_nodes\")
#		# check if the current node is the target node, if yes, build the final path (for the revolucion!)
#		if current_node.position.x == target.x && current_node.position.y == target.y:
#			var final_path = []
#			var node = closed_list[target]
#			final_path.push_back(node.position)
#			while node.position != start:
#				node = closed_list[node.parent]
#				final_path.push_back(node.position)
#			return final_path
#	return null
	"

[node name="Map" type="TileMap"]

position = Vector2( 300, 300 )
scale = Vector2( 0.25, 0.25 )
mode = 0
tile_set = null
cell_size = Vector2( 64, 64 )
cell_quadrant_size = 16
cell_custom_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
cell_half_offset = 2
cell_tile_origin = 0
cell_y_sort = false
cell_clip_uv = false
collision_use_kinematic = false
collision_friction = 1.0
collision_bounce = 0.0
collision_layer = 1
collision_mask = 1
occluder_light_mask = 1
format = 1
tile_data = PoolIntArray(  )
script = SubResource( 1 )
_sections_unfolded = [ "Transform" ]


